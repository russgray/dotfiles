[user]
    name = Russell Gray
[core]
    autocrlf = true
    whitespace = cr-at-eol
[push]
    default = simple
[apply]
    whitespace = nowarn
[merge]
    tool = gvimdiff
    conflictstyle = diff3
    stat = true
[diff]
    renames = copies
    tool = gvimdiff
[alias]
    aa = "!git add . && git add -u && git status"
    authors = !git log --pretty=format:%aN | sort | uniq -c | sort -rn
    bl = blame -w # git bl path/to/file
    br = branch -v
    cb = !git branch | grep ^* | cut -d' ' -f2
    ci = commit
    cl = clone
    co = checkout
    dc = describe --contains
    diffc = diff --cached
    diffw = diff --word-diff
    div = divergence # requires https://raw.githubusercontent.com/garybernhardt/dotfiles/HEAD/bin/git-divergence on PATH
    fa = fetch --all
    la = "!git config -l | grep alias | cut -c 7-"

    # logging aliases
    l = log --pretty=format:\"%h %Cblue%cr%Creset %cn %Cgreen%s%Creset\"
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit
    ll = log --pretty=format:'%C(yellow)%h%Cred%d %Creset%s%Cblue [%cn]' --decorate --numstat

    # more logging aliases from http://stackoverflow.com/a/22875140
    #quick look at all repo
    loggsa = log --color --date-order --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d %Cgreen(%cr)%Creset' --decorate --simplify-by-decoration --all
    #quick look at active branch (or refs pointed)
    loggs  = log --color --date-order --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit --decorate --simplify-by-decoration

    # finds merge base from current branch to specified branch, e.g. 'git mb master'
    mb = !git merge-base `git cb`
    me = log --date=relative --pretty=medium --author='Russell Gray' --stat
    pn = push -u origin HEAD
    req = !sh -c 'CI=$(git merge-base `git cb` $0) && git --no-pager shortlog $CI.. && git --no-pager diff -M --stat --summary $CI'
    s = status
    sb = !ls .git/refs/remotes/*/$(git cb) | cut -d/ -f4,5 | xargs git show-branch $(git cb)
    search = !git --no-pager log --pretty=format:\"%h %Cblue%cr%Creset %cn %Cgreen%s%Creset\" -S
    st = status -s
    url = ls-remote --get-url origin
    week = log --pretty=format:\"%h %Cblue%cr%Creset %cn %Cgreen%s%Creset\" --since='last thursday' --author='Russell Gray'

    # gitflow helpers
    # hotfix always taken from master!
    hotfix = !sh -c 'git fetch && git checkout --no-track -b hotfix-$0 origin/master'
    feature = !sh -c 'git checkout --no-track -b feature-$0 origin/develop'
    # release branch always created from develop!
    prep-release = !sh -c 'git fetch && git checkout --no-track -b release-$0 origin/develop'
    promote = merge --no-ff --edit

    # see https://developer.atlassian.com/blog/2015/01/a-better-pull-request/#comment-1811819137
    # this calls merge-tree with the two specified heads, plus their merge base
    # example: 'git preview-merge myfeature develop' does three-way merge from feature branch to
    # current head of develop and also the point on develop that the feature branch came from
    preview-merge = !sh -c 'git merge-tree $(git merge-base $0 $1) $0 $1'
    # shortcut for previewing a merge to master
    pm = !git fetch && git preview-merge origin/master HEAD

[mergetool]
    keepBackup = false
[rerere]
    enabled = true
[color]
    ui = auto
